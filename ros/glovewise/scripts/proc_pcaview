#!/usr/bin/env python3

import sys
sys.path.append("/usr/lib/python3/dist-packages")

print("load libraries")
if 1:
    import glovewise
    import cv_bridge
    import cv2
    import numpy as np
    import tractor as tr
    import tractor.types_double as tt
    import yaml
    import sklearn
    import sklearn.decomposition
    import mittenwire
    import bson
    import time

print("load glove model")

tr.init_ros("glovewise_proc_view", True)

glove_model = glovewise.GloveModel()
glove_model.load_resource("glovewise", "/models/bonehand37s.dae")


for bag_path in sys.argv[1:]:

    pdat = np.genfromtxt(glovewise.extpath(
        bag_path, ".mdump.csv"), delimiter=" ", names=True)

    obj_path = glovewise.extpath(bag_path, ".track.bson")
    with mittenwire.Profiler("load bson"):
        with open(obj_path, "rb") as f:
            obj_data = bson.loads(f.read())

    print("glove")
    solve_path = glovewise.extpath(bag_path, ".solve.yaml")
    with open(solve_path, "r") as f:
        solve_data = yaml.load(f, Loader=yaml.CLoader)

    robot_model = tt.RobotModel(glove_model.build_urdf(), "")

    print("solve_path", solve_path)
    print("solve_data", solve_data)

    tstart = solve_data[0]["time"]
    tend = solve_data[-1]["time"]

    print(pdat)
    print(pdat.dtype)

    print("visualize trajectory")
    while True:
        istep = 0
        for solve_frame in solve_data:
            if not tr.ros_ok():
                exit(0)
            current_time = solve_frame["time"]
            print((current_time - tstart) * 100 / (tend - tstart))

            profile = 0

            with glovewise.Profiler("deserialize", profile):
                joint_states = tt.JointStates(robot_model)
                joint_states.deserialize([tt.Scalar(pdat["pred_"+n][istep] if "/" not in n else solve_frame["joints"][n])
                                          for n in robot_model.variable_names])

            with glovewise.Profiler("linkstates", profile):
                link_states = robot_model.forward_kinematics(joint_states)

            with glovewise.Profiler("blend", profile):
                vertices = glove_model.blend_skin_from_link_states(
                    link_states)

            with glovewise.Profiler("write mesh", profile):
                tr.visualize_mesh(
                    "xglove", (0, 1, 0, .5), vertices)

            istep += 1

            time.sleep(0.04)
