#!/usr/bin/env python3

import rospy
import mittenwire.msg
import cstruct
import struct
import numpy as np
import time
import scipy.interpolate


class Packet(cstruct.MemCStruct):
    __byte_order__ = cstruct.LITTLE_ENDIAN
    __def__ = """
        struct {

          uint32_t id;

          uint32_t millis;

          uint16_t battery_voltage_mv;
          int16_t shunt_voltage_mv;

          uint8_t core_temperature;
          uint8_t flags;
          uint16_t reserved1;

          int16_t imu_temp_accel_gyro[7];
          uint16_t reserved2;
        };
    """


thermotable = [
    -58, -56, -54, -52, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -30, -20, -10, -
    4, 0, 4, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 40, 50, 60, 70, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 120, 124, 128, 132,
]

rospy.init_node("mittenwire_glove", disable_signals=False)

pub_mat = rospy.Publisher("impedance_matrix", mittenwire.msg.ImpedanceMatrix,
                          latch=False, queue_size=100)

pub_status = rospy.Publisher("glove_status", mittenwire.msg.GloveStatus,
                             latch=False, queue_size=100)

width = 16
height = 16
buffer = np.zeros([width * height * 2], dtype=np.int32)
valid = np.zeros([width * height * 2], dtype=np.int32)

history = []


def handle_packet(message):

    global buffer, valid, history

    id = struct.unpack_from("<I", message.data)[0]

    print(id)

    if id == 0xfcd8a217:

        l = np.frombuffer(message.data, dtype=np.int32, count=8)

        if l[1] == 0:

            h = history
            h.append([
                time.time(),
                np.array(buffer)
            ])
            while len(h) > 10:
                h = h[1:]
            history = h

        for i in range(6):
            j = l[1] * 6 + i
            if j < len(buffer):
                buffer[j] = int(l[2 + i])
                valid[j] = 1

    if id == 0x8da0cdef:

        packet = Packet()
        packet.unpack(message.data)

        print(packet)

        status = mittenwire.msg.GloveStatus()
        status.header = message.header

        status.clock_milliseconds = packet.millis

        status.core_temperature = thermotable[packet.core_temperature & 0b111111]

        status.button_pressed = ((packet.flags & 1) != 0)
        status.battery_disconnect = ((packet.flags & 2) == 0)
        status.battery_charging = ((packet.flags & 4) != 0)
        status.usb_power_present = ((packet.flags & 8) != 0)

        status.battery_voltage = packet.battery_voltage_mv * 0.001
        status.battery_current = packet.shunt_voltage_mv * 0.001 * 10

        status.imu_temperature = (packet.imu_temp_accel_gyro[0] / 132.48) + 25

        ascale = 16.0 / 32767.0
        status.imu_linear_acceleration.x = packet.imu_temp_accel_gyro[1] * ascale
        status.imu_linear_acceleration.y = packet.imu_temp_accel_gyro[2] * ascale
        status.imu_linear_acceleration.z = packet.imu_temp_accel_gyro[3] * ascale

        rscale = 2000.0 / 32767.0
        status.imu_angular_velocity.x = packet.imu_temp_accel_gyro[4] * rscale
        status.imu_angular_velocity.y = packet.imu_temp_accel_gyro[5] * rscale
        status.imu_angular_velocity.z = packet.imu_temp_accel_gyro[6] * rscale

        pub_status.publish(status)


sub = rospy.Subscriber("/packets", mittenwire.msg.Packet,
                       callback=handle_packet)


while not rospy.is_shutdown():

    h = history

    if len(h) > 3:

        tt = [v[0] for v in h]
        vv = [v[1] for v in h]

        interp = scipy.interpolate.interp1d(
            tt, vv, axis=0, bounds_error=False, fill_value="extrapolate", kind="cubic")

        v = interp(time.time() - .5)

        mat = mittenwire.msg.ImpedanceMatrix()
        mat.width = width
        mat.height = height
        mat.inphase = v[0::2]
        mat.quadrature = v[1::2]
        pub_mat.publish(mat)

    time.sleep(0.05)
